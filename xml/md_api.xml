<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="md_api" kind="page">
    <compoundname>md_api</compoundname>
    <title>Summary</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Members   </para>
</entry><entry thead="yes"><para>Descriptions    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>class</computeroutput>`FunctionMapper`   </para>
</entry><entry thead="no"><para>Class providing a mapping between integer function codes and associated functions which support the requirements of <computeroutput>ModuleInterfaceHandler</computeroutput>.   </para>
</entry></row>
</table>
<computeroutput>struct</computeroutput>`FunctionMapper::FunctionMap` |</para>
<sect1 id="md_api_1autotoc_md1">
<title>class &lt;tt&gt;FunctionMapper&lt;/tt&gt;</title>
<para><programlisting><codeline><highlight class="normal">class<sp/>FunctionMapper</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>ModuleOperatorInterfaceClient</highlight></codeline>
</programlisting></para>
<para>Class providing a mapping between integer function codes and associated functions which support the requirements of <computeroutput>ModuleInterfaceHandler</computeroutput>.</para>
<sect2 id="md_api_1autotoc_md2">
<title>Summary</title>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para>Members   </para>
</entry><entry thead="yes"><para>Descriptions    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>public</computeroutput>`FunctionMapper`<computeroutput>(</computeroutput>`FunctionMap`<computeroutput>* functionMapArray,unsigned int size)</computeroutput>   </para>
</entry><entry thead="no"><para>Construct a new FunctionMapper object.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>public bool</computeroutput>`addHandler`<computeroutput>(unsigned char functionCode,bool(*)(unsigned char, unsigned char) handler)</computeroutput>   </para>
</entry><entry thead="no"><para>Add a new FunctionMap to an existing FunctionMapper.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>public bool</computeroutput>`validateAddress`<computeroutput>(unsigned char functionCode)</computeroutput>   </para>
</entry><entry thead="no"><para>Check that a function code is mapped to a function.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>public bool</computeroutput>`processValue`<computeroutput>(unsigned char functionCode,unsigned char value)</computeroutput>   </para>
</entry><entry thead="no"><para>#### Parameters   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="md_api_1autotoc_md3">
<title>Members</title>
<sect4 id="md_api_1autotoc_md4">
<title>&lt;tt&gt;public&lt;/tt&gt;@ref class_function_mapper_1a3e49c4e7559038ea0a7d3d979fd16431 &quot;`FunctionMapper`&quot;&lt;tt&gt;(&lt;/tt&gt;@ref struct_function_mapper_1_1_function_map &quot;`FunctionMap`&quot;&lt;tt&gt;* functionMapArray,unsigned int size)&lt;/tt&gt;</title>
<para>Construct a new FunctionMapper object.</para>
<para>Zero or more FunctionMap definitions can be added to the new FunctionHandler by passing a statically allocated array of FunctionMaps to the constructor. <programlisting filename=".cpp"><codeline><highlight class="normal">FunctionMap<sp/>myFunctionMap[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>functionCode,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)-&gt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((value<sp/>%<sp/>2)<sp/>==<sp/>0);<sp/>}<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>1,<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>functionCode,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)-&gt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((value<sp/>%<sp/>2)<sp/>==<sp/>1);<sp/>}<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>0<sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">FunctionHandler<sp/>myFunctionHandler(myFunctionMap);</highlight></codeline>
</programlisting></para>
<para>With a single array argument the FunctionMapper object is sized to accommodate the supplied map array and use of the <computeroutput>[addHandler()](#class_function_mapper_1a8445f7492e82da8fe6dbbb957e9fc931)</computeroutput> method (see below) is not possible. Optionally the constructor can be passed a second argument which specifies the maximum size of the FunctionHandler and, so long as the supplied array doesn&apos;t fill the map, addHandler() can be used to dynamically add more maps to the FunctionHandler after instantiation. <programlisting filename=".cpp"><codeline><highlight class="normal">FunctionMap<sp/>myFunctionMap[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>functionCode,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)-&gt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((value<sp/>%<sp/>2)<sp/>==<sp/>0);<sp/>}<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>1,<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>functionCode,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)-&gt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((value<sp/>%<sp/>2)<sp/>==<sp/>1);<sp/>}<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>0<sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">FunctionHandler<sp/>myFunctionHandler(myFunctionMap,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">myFunctionHandler.addHandler(9,<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>functionCode,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)-&gt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value<sp/>&gt;<sp/>99);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBig<sp/>=<sp/>myFunctionHandler.process(9,<sp/>101);</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="md_api_1autotoc_md5">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>functionMapArray</computeroutput> - array of FunctionMap structures or 0.</para>
</listitem><listitem><para><computeroutput>size</computeroutput> - the maximum number of FunctionMaps that can be saved in FunctionHandler or zero (the default) to size FunctionHandler so that it can only hold</para>
</listitem><listitem><para><computeroutput>functionMapArray.</computeroutput></para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md6">
<title>&lt;tt&gt;public bool&lt;/tt&gt;@ref class_function_mapper_1a8445f7492e82da8fe6dbbb957e9fc931 &quot;`addHandler`&quot;&lt;tt&gt;(unsigned char functionCode,bool(*)(unsigned char, unsigned char) handler)&lt;/tt&gt;</title>
<para>Add a new FunctionMap to an existing FunctionMapper.</para>
</sect4>
<sect4 id="md_api_1autotoc_md7">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>functionCode</computeroutput> - the value of the map code property.</para>
</listitem><listitem><para><computeroutput>handler</computeroutput> - the handler function to associate with functionCode.</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md8">
<title>Returns</title>
<para>true - suceess.</para>
</sect4>
<sect4 id="md_api_1autotoc_md9">
<title>Returns</title>
<para>false - failure (the FunctionMapper was full).</para>
</sect4>
<sect4 id="md_api_1autotoc_md10">
<title>&lt;tt&gt;public bool&lt;/tt&gt;@ref class_function_mapper_1aeeae983303efa97168866e8ff68cf7c7 &quot;`validateAddress`&quot;&lt;tt&gt;(unsigned char functionCode)&lt;/tt&gt;</title>
<para>Check that a function code is mapped to a function.</para>
</sect4>
<sect4 id="md_api_1autotoc_md11">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>functionCode</computeroutput> - the functiom code to be checked.</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md12">
<title>Returns</title>
<para>true - if a FunctionMap exists with the specified function code.</para>
</sect4>
<sect4 id="md_api_1autotoc_md13">
<title>Returns</title>
<para>false - if there is no FunctionMap with the specified function code.</para>
</sect4>
<sect4 id="md_api_1autotoc_md14">
<title>&lt;tt&gt;public bool&lt;/tt&gt;@ref class_function_mapper_1abb6078f5a7556add80f6587c5b2d1334 &quot;`processValue`&quot;&lt;tt&gt;(unsigned char functionCode,unsigned char value)&lt;/tt&gt;</title>
</sect4>
<sect4 id="md_api_1autotoc_md15">
<title>Parameters</title>
<para><itemizedlist>
<listitem><para><computeroutput>functionCode</computeroutput> - the code of the function to be called.</para>
</listitem><listitem><para><computeroutput>value</computeroutput> - a value to be passed to the function.</para>
</listitem></itemizedlist>
</para>
</sect4>
<sect4 id="md_api_1autotoc_md16">
<title>Returns</title>
<para>true - the function returned true (whatever that means).</para>
</sect4>
<sect4 id="md_api_1autotoc_md17">
<title>Returns</title>
<para>false - the function returned false (whatever that means).</para>
</sect4>
</sect2>
</sect1>
<sect1 id="md_api_1autotoc_md18">
<title>struct &lt;tt&gt;FunctionMapper::FunctionMap&lt;/tt&gt;</title>
<sect2 id="md_api_1autotoc_md19">
<title>Summary</title>
<para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public unsigned int</computeroutput>`functionCode` | <computeroutput>public bool(*</computeroutput>`handler` |</para>
</sect2>
<sect2 id="md_api_1autotoc_md20">
<title>Members</title>
<sect4 id="md_api_1autotoc_md21">
<title>&lt;tt&gt;public unsigned int&lt;/tt&gt;@ref struct_function_mapper_1_1_function_map_1ae62581031d4d9bac8219e1cff35121e9 &quot;`functionCode`&quot;</title>
</sect4>
<sect4 id="md_api_1autotoc_md22">
<title>&lt;tt&gt;public bool(*&lt;/tt&gt;@ref struct_function_mapper_1_1_function_map_1a7050c1e20eb24dba37ff380f83edb48a &quot;`handler`&quot;</title>
<para>Generated by <ulink url="https://sourcey.com/moxygen">Moxygen</ulink> </para>
</sect4>
</sect2>
</sect1>
    </detaileddescription>
    <location file="api.md"/>
  </compounddef>
</doxygen>
